service:
  name: service-10-udagram-applat
# app and org for use with dashboard.serverless.com
#app: your-app-name
#org: your-org-name

custom:
  webpack:
    webpackConfig: ./webpack.config.js
    includeModules: true

# Add the serverless-webpack plugin
plugins:
  - serverless-webpack
  - serverless-aws-documentation

provider:
  name: aws
  runtime: nodejs12.x
  apiGateway:
    minimumCompressionSize: 1024 # Enable gzip compression for responses > 1 KB
  environment:
    AWS_NODEJS_CONNECTION_REUSE_ENABLED: 1
    GROUP_TABLE: Groups-${self:provider.stage}
    IMAGES_TABLE: IMAGES-${self:provider.stage}

    stage: ${opt:stage, 'dev'}s
    region: ${opt:region, 'us-east-1'}

  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Scan
        - dynamodb:PutItem
        - dynamodb:GetItem
      Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.GROUP_TABLE}
    - Effect: Allow
      Action:
        - dynamodb:Scan
        - dynamodb:PutItem
        - dynamodb:GetItem
        - dynamodb:Query
      Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.IMAGES_TABLE}
    

functions:
  GetGroups:
    handler: src/lambda/http/getGroups.handler     
    events:
     - http:
         method: get
         path:  groups
         cors:  true    
         
  CreateGroup:
    handler: src/lambda/http/createGroup.handler   
    events:
     - http:
         method: post
         path:  groups
         cors:  true    
         request:
          schemas:
           application/json: ${file(models/create-group-request.json)} 

  GetImages:
    handler: src/lambda/http/getImages.handler     
    events:
     - http:
         method: get
         path:  groups/{groupId}/images
         cors:  true    

resources:
  Resources:
    GroupsDynamoDBTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST
        TableName: ${self:provider.environment.GROUP_TABLE}
    
    ImagesDynamoDBTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: groupId
            AttributeType: S
          - AttributeName: timestamp
            AttributeType: S  
        KeySchema:
          - AttributeName: groupId
            KeyType: HASH
          - AttributeName: timestamp
            KeyType: RANGE  
        BillingMode: PAY_PER_REQUEST
        TableName: ${self:provider.environment.IMAGES_TABLE}
    
    


